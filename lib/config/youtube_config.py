"""YouTube API configuration management."""

import os
from dataclasses import dataclass
from pathlib import Path
from typing import Optional, List, Dict, Any


@dataclass
class YouTubeCredentials:
    """YouTube API credentials configuration."""
    
    api_key: Optional[str] = None
    client_secrets_file: Optional[str] = None
    token_file: str = "youtube_token.json"
    
    @classmethod
    def from_environment(cls) -> 'YouTubeCredentials':
        """Create credentials from environment variables.
        
        Returns:
            YouTubeCredentials instance with values from environment
        """
        return cls(
            api_key=os.getenv('YOUTUBE_API_KEY'),
            client_secrets_file=os.getenv('YOUTUBE_CLIENT_SECRETS'),
            token_file=os.getenv('YOUTUBE_TOKEN_FILE', 'youtube_token.json')
        )
    
    def validate(self) -> bool:
        """Validate that required credentials are present.
        
        Returns:
            True if API key is present, False otherwise
        """
        return self.api_key is not None


@dataclass
class YouTubeUploadConfig:
    """Configuration for YouTube video uploads."""
    
    default_title: str = "MoneyTree Generated Video"
    default_description: str = "Educational content generated by MoneyTree"
    default_tags: List[str] = None
    default_privacy: str = "private"
    default_category_id: str = "22"  # People & Blogs
    
    def __post_init__(self):
        """Initialize default values after dataclass creation."""
        if self.default_tags is None:
            self.default_tags = ["education", "ai", "moneytree"]
    
    @classmethod
    def from_topic(cls, topic: str) -> 'YouTubeUploadConfig':
        """Create upload config customized for a specific topic.
        
        Args:
            topic: The topic being uploaded about
            
        Returns:
            YouTubeUploadConfig with topic-specific defaults
        """
        return cls(
            default_title=f"{topic} - Educational Content",
            default_description=f"Learn about {topic} with MoneyTree's AI-generated educational content.",
            default_tags=["education", "ai", "moneytree", topic.lower().replace(" ", "")]
        )


@dataclass
class YouTubeChannelConfig:
    """Configuration for YouTube channel operations."""
    
    channel_id: Optional[str] = None
    default_video_limit: int = 50
    cache_duration: int = 3600  # 1 hour in seconds
    
    @classmethod
    def from_environment(cls) -> 'YouTubeChannelConfig':
        """Create channel config from environment variables.
        
        Returns:
            YouTubeChannelConfig with values from environment
        """
        return cls(
            channel_id=os.getenv('YOUTUBE_CHANNEL_ID'),
            default_video_limit=int(os.getenv('YOUTUBE_DEFAULT_LIMIT', '50')),
            cache_duration=int(os.getenv('YOUTUBE_CACHE_DURATION', '3600'))
        )


@dataclass
class YouTubeQuotaConfig:
    """Configuration for YouTube API quota management."""
    
    daily_quota_limit: int = 10000
    upload_cost: int = 1600
    list_cost: int = 1
    search_cost: int = 100
    
    def estimate_daily_uploads(self) -> int:
        """Estimate maximum daily uploads based on quota.
        
        Returns:
            Maximum number of videos that can be uploaded per day
        """
        return self.daily_quota_limit // self.upload_cost
    
    def estimate_quota_usage(self, uploads: int = 0, searches: int = 0, lists: int = 0) -> int:
        """Estimate quota usage for planned operations.
        
        Args:
            uploads: Number of video uploads
            searches: Number of search operations
            lists: Number of list operations
            
        Returns:
            Estimated quota units consumed
        """
        return (uploads * self.upload_cost + 
                searches * self.search_cost + 
                lists * self.list_cost)


class YouTubeConfigManager:
    """Centralized YouTube configuration management."""
    
    def __init__(self, 
                 credentials: Optional[YouTubeCredentials] = None,
                 upload_config: Optional[YouTubeUploadConfig] = None,
                 channel_config: Optional[YouTubeChannelConfig] = None,
                 quota_config: Optional[YouTubeQuotaConfig] = None):
        """Initialize YouTube configuration manager.
        
        Args:
            credentials: YouTube API credentials
            upload_config: Video upload configuration
            channel_config: Channel operations configuration  
            quota_config: Quota management configuration
        """
        self.credentials = credentials or YouTubeCredentials.from_environment()
        self.upload_config = upload_config or YouTubeUploadConfig()
        self.channel_config = channel_config or YouTubeChannelConfig.from_environment()
        self.quota_config = quota_config or YouTubeQuotaConfig()
    
    def validate_configuration(self) -> Dict[str, Any]:
        """Validate all configuration components.
        
        Returns:
            Dictionary with validation results
        """
        result = {
            'valid': True,
            'issues': [],
            'warnings': []
        }
        
        # Check credentials
        if not self.credentials.validate():
            result['valid'] = False
            result['issues'].append("YOUTUBE_API_KEY environment variable not set")
        
        # Check client secrets file if specified
        if self.credentials.client_secrets_file:
            if not Path(self.credentials.client_secrets_file).exists():
                result['warnings'].append(f"Client secrets file not found: {self.credentials.client_secrets_file}")
        
        # Check quota configuration
        max_uploads = self.quota_config.estimate_daily_uploads()
        if max_uploads < 1:
            result['warnings'].append(f"Daily quota only allows {max_uploads} uploads per day")
        
        return result
    
    def get_upload_metadata(self, topic: str, **overrides) -> Dict[str, Any]:
        """Get complete upload metadata for a topic.
        
        Args:
            topic: The topic being uploaded about
            **overrides: Override default values
            
        Returns:
            Dictionary with upload metadata
        """
        topic_config = YouTubeUploadConfig.from_topic(topic)
        
        metadata = {
            'title': overrides.get('title', topic_config.default_title),
            'description': overrides.get('description', topic_config.default_description),
            'tags': overrides.get('tags', topic_config.default_tags),
            'privacy_status': overrides.get('privacy_status', topic_config.default_privacy),
            'category_id': overrides.get('category_id', topic_config.default_category_id)
        }
        
        return metadata
    
    def get_oauth_scopes(self) -> List[str]:
        """Get required OAuth2 scopes for YouTube operations.
        
        Returns:
            List of OAuth2 scope URLs
        """
        return [
            'https://www.googleapis.com/auth/youtube.upload',
            'https://www.googleapis.com/auth/youtube.readonly'
        ]
    
    @classmethod
    def create_default(cls) -> 'YouTubeConfigManager':
        """Create a default configuration manager from environment.
        
        Returns:
            YouTubeConfigManager with default settings
        """
        return cls()
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert configuration to dictionary format.
        
        Returns:
            Dictionary representation of configuration
        """
        return {
            'credentials': {
                'has_api_key': bool(self.credentials.api_key),
                'client_secrets_file': self.credentials.client_secrets_file,
                'token_file': self.credentials.token_file
            },
            'upload_config': {
                'default_title': self.upload_config.default_title,
                'default_description': self.upload_config.default_description,
                'default_tags': self.upload_config.default_tags,
                'default_privacy': self.upload_config.default_privacy,
                'default_category_id': self.upload_config.default_category_id
            },
            'channel_config': {
                'channel_id': self.channel_config.channel_id,
                'default_video_limit': self.channel_config.default_video_limit,
                'cache_duration': self.channel_config.cache_duration
            },
            'quota_config': {
                'daily_quota_limit': self.quota_config.daily_quota_limit,
                'max_daily_uploads': self.quota_config.estimate_daily_uploads()
            }
        }