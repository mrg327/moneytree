#!/usr/bin/env python3
"""TikTok upload automation tool.

This tool provides command-line access to TikTok video upload functionality including:
- Video uploads with metadata (title, description, tags, privacy settings)
- Cookie-based authentication with manual login fallback
- Selenium-based automation for TikTok's web interface
- Progress monitoring and error handling

Setup Requirements:
1. Set TIKTOK_USERNAME and TIKTOK_PASSWORD environment variables
2. Install Chrome/Chromium browser
3. Ensure stable internet connection for uploads

Examples:
    # Test authentication
    uv run python -m tools.tiktok_upload --authenticate

    # Upload a video
    uv run python -m tools.tiktok_upload \
      --upload video.mp4 \
      --title "My Educational Video" \
      --description "Generated by MoneyTree" \
      --tags "education" "ai" \
      --privacy public

    # Upload with custom settings
    uv run python -m tools.tiktok_upload \
      --upload video.mp4 \
      --title "Quantum Physics Explained" \
      --description "Learn quantum physics in 60 seconds!" \
      --tags "science" "physics" "education" \
      --privacy public \
      --no-headless

Integration with MoneyTree Pipeline:
    # Complete workflow: Wikipedia → TTS → Video → TikTok
    uv run python -m tools.natural_tts "Quantum Physics" --engine chattts
    uv run python -m tools.wikipedia_video "Quantum Physics" --include-image
    uv run python -m tools.tiktok_upload \
      --upload video_output/quantum_physics_video.mp4 \
      --title "Quantum Physics Explained"
"""

import argparse
import os
import sys
from pathlib import Path
from typing import Optional

from lib.upload.tiktok import TikTokClient
from lib.config.tiktok_config import TikTokConfigManager
from lib.utils.logging_config import setup_logging


def validate_video_file(video_path: str) -> bool:
    """Validate video file exists and is accessible.
    
    Args:
        video_path: Path to video file
        
    Returns:
        True if video file is valid, False otherwise
    """
    if not os.path.exists(video_path):
        print(f"ERROR: Video file not found: {video_path}")
        return False
    
    # Check file size (TikTok has upload limits)
    file_size = os.path.getsize(video_path)
    max_size = 287 * 1024 * 1024  # 287MB (TikTok's current limit)
    
    if file_size > max_size:
        print(f"ERROR: Video file too large: {file_size / (1024*1024):.1f}MB (max 287MB)")
        return False
    
    return True


def format_upload_metadata(config_manager: TikTokConfigManager, 
                          title: str, 
                          description: Optional[str] = None,
                          tags: Optional[list] = None,
                          privacy: str = "public") -> dict:
    """Format upload metadata using configuration.
    
    Args:
        config_manager: TikTok configuration manager
        title: Video title
        description: Video description
        tags: List of tags
        privacy: Privacy setting
        
    Returns:
        Dictionary with formatted metadata
    """
    # Use topic-based configuration if available
    metadata = config_manager.get_upload_metadata(title)
    
    # Override with provided values
    if description:
        metadata['description'] = description
    if tags:
        metadata['tags'] = tags
    if privacy != "public":
        metadata['privacy'] = privacy
    
    return metadata


def main():
    """Main TikTok upload tool function."""
    parser = argparse.ArgumentParser(
        description="TikTok Upload Tool",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Test authentication
  %(prog)s --authenticate
  
  # Upload a video
  %(prog)s --upload video.mp4 --title "My Video" --tags education ai
  
  # Upload with custom settings
  %(prog)s --upload video.mp4 --title "Educational Content" --privacy public --no-headless
        """
    )
    
    # Main actions
    parser.add_argument("--authenticate", action="store_true", 
                       help="Test authentication and save cookies")
    parser.add_argument("--upload", type=str, 
                       help="Path to video file to upload")
    
    # Video metadata
    parser.add_argument("--title", type=str, default="MoneyTree Generated Video",
                       help="Video title")
    parser.add_argument("--description", type=str,
                       help="Video description")
    parser.add_argument("--tags", type=str, nargs="*", 
                       help="Video tags/hashtags (without #)")
    parser.add_argument("--privacy", type=str, choices=["public", "private", "friends"],
                       default="public", help="Privacy setting")
    
    # Authentication options
    parser.add_argument("--username", type=str,
                       help="TikTok username (overrides environment variable)")
    parser.add_argument("--password", type=str,
                       help="TikTok password (overrides environment variable)")
    parser.add_argument("--cookies-file", type=str,
                       help="Path to cookies file for session persistence")
    
    # Selenium options
    parser.add_argument("--no-headless", action="store_true",
                       help="Run browser in non-headless mode (visible)")
    parser.add_argument("--timeout", type=int, default=300,
                       help="Upload timeout in seconds (default: 300)")
    
    # Configuration options
    parser.add_argument("--config-check", action="store_true",
                       help="Check configuration and exit")
    parser.add_argument("--topic", type=str,
                       help="Topic for automatic metadata generation")
    
    args = parser.parse_args()
    
    setup_logging()
    
    try:
        # Create configuration manager
        config_manager = TikTokConfigManager.create_default()
        
        # Override credentials if provided
        if args.username:
            config_manager.credentials.username = args.username
        if args.password:
            config_manager.credentials.password = args.password
        if args.cookies_file:
            config_manager.credentials.cookies_file = args.cookies_file
        
        # Override selenium config if needed
        if args.no_headless:
            config_manager.selenium_config.headless = False
        if args.timeout:
            config_manager.selenium_config.upload_timeout = args.timeout
        
        # Configuration check
        if args.config_check:
            print("Checking TikTok configuration...")
            validation = config_manager.validate_configuration()
            
            if validation['valid']:
                print("✓ Configuration is valid")
            else:
                print("✗ Configuration has issues:")
                for issue in validation['issues']:
                    print(f"  - {issue}")
            
            if validation['warnings']:
                print("Warnings:")
                for warning in validation['warnings']:
                    print(f"  - {warning}")
            
            # Show rate limiting info
            eligibility = config_manager.check_upload_eligibility()
            print(f"\nRate Limiting:")
            print(f"  Daily limit: {eligibility['rate_limits']['daily_limit']} videos")
            print(f"  Cooldown: {eligibility['rate_limits']['cooldown_minutes']} minutes")
            
            return
        
        # Validate configuration
        validation = config_manager.validate_configuration()
        if not validation['valid']:
            print("ERROR: Configuration validation failed:")
            for issue in validation['issues']:
                print(f"  - {issue}")
            sys.exit(1)
        
        # Create TikTok client
        with TikTokClient(
            headless=config_manager.selenium_config.headless,
            cookies_file=config_manager.credentials.cookies_file
        ) as client:
            
            if args.authenticate:
                print("Testing TikTok authentication...")
                
                success = client.authenticate(
                    username=config_manager.credentials.username,
                    password=config_manager.credentials.password
                )
                
                if success:
                    print("✓ Authentication successful")
                    print(f"✓ Cookies saved to: {config_manager.credentials.cookies_file}")
                else:
                    print("✗ Authentication failed")
                    sys.exit(1)
            
            elif args.upload:
                # Validate video file
                if not validate_video_file(args.upload):
                    sys.exit(1)
                
                # Check upload eligibility
                eligibility = config_manager.check_upload_eligibility()
                if not eligibility['can_upload']:
                    print("ERROR: Upload rate limit reached")
                    schedule = eligibility['schedule']
                    if 'days_needed' in schedule:
                        print(f"  Next upload available in {schedule['days_needed']} days")
                    sys.exit(1)
                
                # Authenticate
                print("Authenticating with TikTok...")
                success = client.authenticate(
                    username=config_manager.credentials.username,
                    password=config_manager.credentials.password
                )
                
                if not success:
                    print("ERROR: Authentication failed")
                    sys.exit(1)
                
                # Prepare upload metadata
                if args.topic:
                    metadata = config_manager.get_upload_metadata(args.topic)
                    # Override with command line arguments
                    if args.title != "MoneyTree Generated Video":
                        metadata['title'] = args.title
                    if args.description:
                        metadata['description'] = args.description
                    if args.tags:
                        metadata['tags'] = args.tags
                    if args.privacy != "public":
                        metadata['privacy'] = args.privacy
                else:
                    metadata = format_upload_metadata(
                        config_manager, 
                        args.title, 
                        args.description, 
                        args.tags, 
                        args.privacy
                    )
                
                # Display upload information
                print(f"\nUploading video: {args.upload}")
                print(f"Title: {metadata['title']}")
                print(f"Description: {metadata.get('description', 'N/A')}")
                print(f"Tags: {', '.join(metadata.get('tags', []))}")
                print(f"Privacy: {metadata.get('privacy', 'public')}")
                print(f"Timeout: {config_manager.selenium_config.upload_timeout}s")
                print()
                
                # Upload video
                success = client.upload_video(
                    video_path=args.upload,
                    title=metadata['title'],
                    description=metadata.get('description', ''),
                    tags=metadata.get('tags', []),
                    privacy=metadata.get('privacy', 'public')
                )
                
                if success:
                    print("✓ Video uploaded successfully!")
                    print(f"✓ Title: {metadata['title']}")
                    print(f"✓ Privacy: {metadata.get('privacy', 'public')}")
                else:
                    print("✗ Video upload failed")
                    sys.exit(1)
            
            else:
                # Show help if no action specified
                parser.print_help()
                
                # Show configuration status
                print("\nConfiguration Status:")
                validation = config_manager.validate_configuration()
                
                if validation['valid']:
                    print("✓ Configuration is valid")
                else:
                    print("✗ Configuration has issues:")
                    for issue in validation['issues']:
                        print(f"  - {issue}")
                
                if validation['warnings']:
                    print("Warnings:")
                    for warning in validation['warnings']:
                        print(f"  - {warning}")
                
                # Show rate limiting info
                eligibility = config_manager.check_upload_eligibility()
                print(f"\nRate Limiting:")
                print(f"  Daily limit: {eligibility['rate_limits']['daily_limit']} videos")
                print(f"  Cooldown: {eligibility['rate_limits']['cooldown_minutes']} minutes")
                print(f"  Can upload now: {'Yes' if eligibility['can_upload'] else 'No'}")
    
    except KeyboardInterrupt:
        print("\nOperation cancelled by user")
    except Exception as e:
        print(f"ERROR: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()