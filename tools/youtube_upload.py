#!/usr/bin/env python3
"""YouTube upload and channel management tool.

This tool provides command-line access to YouTube Data API v3 functionality including:
- Video uploads with metadata (title, description, tags, privacy settings)
- Channel video listing with optional limits
- Upload status monitoring
- OAuth2 and API key authentication

Setup Requirements:
1. Set YOUTUBE_API_KEY environment variable
2. Download client_secrets.json from Google Cloud Console
3. Enable YouTube Data API v3 in your Google Cloud project
4. Complete setup guide: docs/YOUTUBE_SETUP.md

Examples:
    # Test authentication
    python tools/youtube_upload.py

    # Upload a video
    python tools/youtube_upload.py \
      --upload video.mp4 \
      --title "My Educational Video" \
      --description "Generated by MoneyTree" \
      --tags "education" "ai" \
      --privacy private \
      --client-secrets client_secrets.json

    # List your channel's videos
    python tools/youtube_upload.py \
      --list-videos \
      --limit 10 \
      --client-secrets client_secrets.json

    # List public channel videos
    python tools/youtube_upload.py \
      --list-videos \
      --channel-id UCxxxxxxxxxxxxxxxxxx \
      --limit 5

Integration with MoneyTree Pipeline:
    # Complete workflow: Wikipedia → TTS → Video → YouTube
    python tools/natural_tts.py "Quantum Physics" --engine chattts
    python tools/wikipedia_video.py "Quantum Physics" --include-image
    python tools/youtube_upload.py \
      --upload video_output/quantum_physics_video.mp4 \
      --title "Quantum Physics Explained" \
      --client-secrets client_secrets.json
"""

import argparse
import os
import sys
from pathlib import Path

from lib.upload.youtube import YouTubeClient
from lib.utils.logging_config import setup_logging


def main():
    """Main demo function."""
    parser = argparse.ArgumentParser(description="YouTube Upload Demo")
    parser.add_argument("--upload", type=str, help="Path to video file to upload")
    parser.add_argument("--title", type=str, default="MoneyTree Demo Video", help="Video title")
    parser.add_argument("--description", type=str, default="Generated by MoneyTree", help="Video description")
    parser.add_argument("--tags", type=str, nargs="*", default=["education", "ai", "moneytree"], help="Video tags")
    parser.add_argument("--privacy", type=str, choices=["private", "public", "unlisted"], default="private", help="Privacy status")
    parser.add_argument("--channel-id", type=str, help="Channel ID to list videos from")
    parser.add_argument("--list-videos", action="store_true", help="List videos from channel")
    parser.add_argument("--limit", type=int, help="Limit number of videos to list")
    parser.add_argument("--client-secrets", type=str, help="Path to OAuth2 client secrets file")
    parser.add_argument("--token-file", type=str, default="youtube_token.json", help="Path to token file")
    
    # Enhanced upload parameters
    parser.add_argument("--language", type=str, help="Default language (ISO 639-1 code, e.g., 'en')")
    parser.add_argument("--made-for-kids", action="store_true", help="Mark video as made for kids (COPPA compliance)")
    parser.add_argument("--not-made-for-kids", action="store_true", help="Mark video as NOT made for kids")
    parser.add_argument("--synthetic-media", action="store_true", help="Mark as containing AI-generated content")
    parser.add_argument("--publish-at", type=str, help="Schedule publish time (ISO 8601 format)")
    parser.add_argument("--no-embedding", action="store_true", help="Disable video embedding")
    parser.add_argument("--hide-stats", action="store_true", help="Hide view count and stats")
    parser.add_argument("--no-notifications", action="store_true", help="Don't notify subscribers")
    parser.add_argument("--thumbnail", type=str, help="Path to custom thumbnail image (JPEG/PNG, max 2MB)")
    
    args = parser.parse_args()
    
    setup_logging()
    
    # Check for API key
    if not os.getenv('YOUTUBE_API_KEY'):
        print("ERROR: YOUTUBE_API_KEY environment variable not set")
        sys.exit(1)
    
    try:
        client = YouTubeClient()
        
        if args.upload:
            # Upload video requires OAuth2 authentication
            if not args.client_secrets:
                print("ERROR: --client-secrets required for video upload")
                sys.exit(1)
            
            if not os.path.exists(args.client_secrets):
                print(f"ERROR: Client secrets file not found: {args.client_secrets}")
                sys.exit(1)
            
            if not os.path.exists(args.upload):
                print(f"ERROR: Video file not found: {args.upload}")
                sys.exit(1)
            
            print("Authenticating with YouTube API...")
            if not client.authenticate(args.client_secrets, args.token_file):
                print("ERROR: Authentication failed")
                sys.exit(1)
            
            # Handle mutually exclusive kids options
            made_for_kids = None
            if args.made_for_kids and args.not_made_for_kids:
                print("ERROR: Cannot specify both --made-for-kids and --not-made-for-kids")
                sys.exit(1)
            elif args.made_for_kids:
                made_for_kids = True
            elif args.not_made_for_kids:
                made_for_kids = False
            
            print(f"Uploading video: {args.upload}")
            result = client.upload_video(
                video_path=args.upload,
                title=args.title,
                description=args.description,
                tags=args.tags,
                privacy_status=args.privacy,
                default_language=args.language,
                made_for_kids=made_for_kids,
                contains_synthetic_media=args.synthetic_media,
                publish_at=args.publish_at,
                embeddable=not args.no_embedding,
                public_stats_viewable=not args.hide_stats,
                notify_subscribers=not args.no_notifications
            )
            
            if result:
                print(f"Upload successful!")
                print(f"Video ID: {result['id']}")
                print(f"Title: {result['snippet']['title']}")
                print(f"URL: https://www.youtube.com/watch?v={result['id']}")
                
                # Upload custom thumbnail if provided
                if args.thumbnail:
                    print(f"\nUploading custom thumbnail: {args.thumbnail}")
                    if client.set_thumbnail(result['id'], args.thumbnail):
                        print("✓ Thumbnail uploaded successfully")
                    else:
                        print("✗ Thumbnail upload failed")
                
                # Check upload status
                print("\nChecking upload status...")
                status = client.get_upload_status(result['id'])
                if status:
                    upload_status = status.get('status', {})
                    print(f"Privacy Status: {upload_status.get('privacyStatus', 'Unknown')}")
                    print(f"Upload Status: {upload_status.get('uploadStatus', 'Unknown')}")
            else:
                print("Upload failed")
                sys.exit(1)
        
        elif args.list_videos:
            # List videos - can use API key for public channels or OAuth for own channel
            if args.channel_id:
                # Use API key for public channel
                if not client.authenticate():
                    print("ERROR: Authentication failed")
                    sys.exit(1)
            else:
                # Use OAuth for own channel
                if not args.client_secrets:
                    print("ERROR: --client-secrets required to list videos from your own channel")
                    sys.exit(1)
                
                if not client.authenticate(args.client_secrets, args.token_file):
                    print("ERROR: Authentication failed")
                    sys.exit(1)
            
            print("Fetching channel videos...")
            videos = client.get_channel_videos(args.channel_id, args.limit)
            
            if videos:
                print(f"\nFound {len(videos)} videos:")
                print("-" * 80)
                
                for i, video in enumerate(videos, 1):
                    print(f"{i}. {video['title']}")
                    print(f"   ID: {video['id']}")
                    print(f"   Published: {video['published_at']}")
                    print(f"   Views: {video['view_count']:,}")
                    print(f"   Likes: {video['like_count']:,}")
                    print(f"   Privacy: {video['privacy_status']}")
                    print(f"   URL: https://www.youtube.com/watch?v={video['id']}")
                    if i < len(videos):
                        print()
            else:
                print("No videos found")
        
        else:
            # Test authentication only
            print("Testing YouTube API authentication...")
            if client.authenticate():
                print("✓ API key authentication successful")
            else:
                print("✗ API key authentication failed")
            
            if args.client_secrets and os.path.exists(args.client_secrets):
                print("Testing OAuth2 authentication...")
                if client.authenticate(args.client_secrets, args.token_file):
                    print("✓ OAuth2 authentication successful")
                else:
                    print("✗ OAuth2 authentication failed")
    
    except KeyboardInterrupt:
        print("\nOperation cancelled by user")
    except Exception as e:
        print(f"ERROR: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
